class Solution {
    
    public int firstMissingPositive2(int[] nums) {
        int len = nums.length;
        
        boolean haveOne = false;
        for (int i = 0; i < len; ++i) {
            if (nums[i] == 1) {
                haveOne = true;
                break;
            } 
        }
        
        if (!haveOne) {
            return 1;
        }
        
        for (int i = 0; i < len; ++i) {
            if (nums[i] <=0 || nums[i] > len) {
                nums[i] = 1;
            }
        }
        
        for (int i = 0; i < len; ++i) {
            int a = Math.abs(nums[i]);
            
            if (a == len) {
                nums[0] = - Math.abs(nums[0]);
            } else {
                nums[a] = - Math.abs(nums[a]);
            }
        }
        
        for (int i = 1; i < len; ++i) {
            if (nums[i] > 0) {
                return i;
            }
        }
        
        if (nums[0] > 0) {
            return len;
        }
        
        return len + 1;
    }
    
    
    
    
    
    // T = O(N); S = O(N)
    public int firstMissingPositive1(int[] nums) {
        int len = nums.length;
        
        int[] flag = new int[len + 1];
        
        if (len < 1) {
            return 1;
        }
        
        for (int i = 0; i < len; ++i) {
            if (nums[i] > len || nums[i] < 0) {
                continue;
            } 
            
            flag[nums[i]] = 1;
        }
        
        for (int i = 1; i < len + 1; ++i) {
            if (flag[i] != 1) {
                return i;
            }
        }
        
        return len + 1;
    }
}
