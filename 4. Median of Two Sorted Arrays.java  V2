class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len1 = nums1.length, len2 = nums2.length;
        
        if (len1 > len2) {
            int[] tmp = nums2;
            nums2 = nums1;
            nums1 = tmp;
        }
        
        len1 = nums1.length;
        len2 = nums2.length;
        
        int left = 0, right = len1, halfLen = (len1 + len2 + 1) / 2;
        
        while (left <= right) {
            int i = (left + right) / 2;
            int j = halfLen - i;
            
            if (i < right && nums2[j-1] > nums1[i]) {
                left = i + 1;
            } else if (i > left && nums1[i-1] > nums2[j]) {
                right = i - 1;
            } else {
                int maxLeft = 0;
                if (i == 0) {
                    maxLeft = nums2[j-1];
                } else if (j == 0) {
                    maxLeft = nums1[i-1];
                } else {
                    maxLeft = Math.max(nums1[i-1], nums2[j-1]);
                }
                
                if ((len1 + len2) % 2 == 1) {
                    return maxLeft;
                }
                
                
                int minRight = 0;
                if (i == len1) {
                    minRight = nums2[j];
                } else if (j == len2) {
                    minRight = nums1[i];
                } else {
                    minRight = Math.min(nums2[j], nums1[i]);
                }
                
                return (maxLeft + minRight) / 2.0;
            }
            
        }
        
        return 0.0;
        
    }
}
