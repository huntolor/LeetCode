/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    // O(klogN) 
    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<Integer> pQueue = new PriorityQueue<>();
        
        for (ListNode list : lists) {
            ListNode p = list;
            while(p != null) {
                pQueue.add(p.val);
                p = p.next;
            }
        }
        
        ListNode dummyHead = new ListNode(0), p = dummyHead;
        
        Iterator iter = pQueue.iterator();
        while(iter.hasNext()) {
            int val = (int) pQueue.poll();
            p.next = new ListNode(val);
            
            p = p.next;
        }
        
        p.next = null;
        
        return dummyHead.next;
    }
    
    
    // Time Complexity = O(logkN)
    public ListNode mergeKLists2(ListNode[] lists) {
        int len = lists.length;
        
        if (len < 1) {
            return null;
        }
        
        int interval = 1;
        
        while(interval < len) {
            for (int i = 0; i < len - interval; i += (interval * 2)) {
                lists[i] = mergeTwoLists(lists[i], lists[i+interval]);
            }
            
            interval *= 2;
        }
        
        return lists[0];
    }
    
    
    // Time Complexity = O(kN) N is total nodes number, k is the number of lists; Space Complexity = O(1)
    public ListNode mergeKLists1(ListNode[] lists) {
        if (lists.length < 1) {
            return null;
        }
        
        ListNode mergedList = null;
        for (ListNode list : lists) {
            mergedList = mergeTwoLists(mergedList, list);
        }
        
        return mergedList;
    }
    
    // Time Complexity = O(N) N is max length of nodes; Space Complexity = O(1)
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if (list1 == null) {
            return list2;
        }
        
        if (list2 == null) {
            return list1;
        }
        
        ListNode dummyHead = new ListNode(0), p = dummyHead;
        
        ListNode l1 = list1, l2 = list2;
        while(l1 != null || l2 != null) {            
            if (l1 != null && l2 != null) {
                if (l1.val < l2.val) {
                    p.next = l1;
                    l1 = l1.next;
                } else {
                    p.next = l2;
                    l2 = l2.next;
                }
                
                p = p.next;
                
                continue;
            }
            
            if (l1 != null) {
                p.next = l1;
                l1 = l1.next;
                
                p = p.next;
                
                continue;
            } 
            
            if (l2 != null) {
                p.next = l2;
                l2 = l2.next;
                
                p = p.next;
                continue;
            }
        }
                
        return dummyHead.next;
    }   
    
}
